using System;
using System.Collections.Generic;

namespace DesignPatterns.Behavioral.Interpreter.Sample2
{
    public class Client
    {
        public void SearchProducts()
        {
            var products = GetProducts();
            var expression = GetExpression(out var x, out var y, out var z);

            // For each product:
            // - specifying the search criteria dynamically and setting the context
            // - interpreting (evaluating) the Abstract Syntax Tree - AST (search expression).
            var context = new Context();
            foreach (var product in products)
            {
                // For example, searching products with: 
                // (group == "PC" and prize > 1000) or 
                // (prize > 1000 and description containing "TV" and group is not "PC").
                // Setting VarExpr x,y,z in context to true or false.
                context.SetVarExpression(x, product.Group == "PC" ? true : false);
                context.SetVarExpression(y, product.Price > 1000 ? true : false);
                context.SetVarExpression(z, product.Description.Contains("TV") ? true : false);

                // Interpreting (evaluating) the AST (search expression).
                if (expression.Evaluate(context))
                {
                    Console.WriteLine("Product found: " + product.Description);
                }
            }
        }

        private static List<IProduct> GetProducts()
        {
            // Creating a collection of product objects.
            return new List<IProduct>
            {
                new SalesProduct("PC1", "PC", "Product PC 1000", 1000),
                new SalesProduct("PC2", "PC", "Product PC 2000", 2000),
                new SalesProduct("PC3", "PC", "Product PC 3000", 3000),
                new SalesProduct("TV1", "TV", "Product TV 1000", 1000),
                new SalesProduct("TV2", "TV", "Product TV 2000", 2000),
                new SalesProduct("TV3", "TV", "Product TV 3000", 3000)
            };
        }

        /// <summary>
        /// Representing the search expression:
        /// ( (x and y) or (y and z and (not x)) )
        /// </summary>
        /// <returns></returns>
        /// <remarks>Usually generated by a parser</remarks>
        private static Expression GetExpression(out VarExpression x, out VarExpression y, out VarExpression z)
        {
            x = new VarExpression("X");
            y = new VarExpression("Y");
            z = new VarExpression("Z");

            var AndExpression1 = new AndExpression
            {
                x,
                y
            };

            var AndExpression2 = new AndExpression
            {
                y,
                z
            };

            var notExpr = new NotExpression
            {
                x
            };

            AndExpression2.Add(notExpr);

            return new OrExpression
            {
                AndExpression1,
                AndExpression2
            };
        }
    }
}
